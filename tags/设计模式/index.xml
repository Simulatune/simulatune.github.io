<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on Simulatune&#39;s Blog</title>
    <link>https://simulatune.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on Simulatune&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Oct 2022 20:22:00 +0800</lastBuildDate><atom:link href="https://simulatune.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式</title>
      <link>https://simulatune.github.io/post/2022/10/design_pattern/</link>
      <pubDate>Fri, 07 Oct 2022 20:22:00 +0800</pubDate>
      
      <guid>https://simulatune.github.io/post/2022/10/design_pattern/</guid>
      <description>设计模式 1 int i = 0; 创建型模式 单例模式 确保一个类只有一个实例，并提供全局访问点。 生成器模式 使用生成器模式封装一个产品的构造过程，并允许按步骤构</description>
    </item>
    
  </channel>
</rss>
