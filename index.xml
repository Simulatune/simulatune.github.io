<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simulatune&#39;s Blog</title>
    <link>https://simulatune.github.io/</link>
    <description>Recent content on Simulatune&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Oct 2022 20:22:00 +0800</lastBuildDate><atom:link href="https://simulatune.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于</title>
      <link>https://simulatune.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://simulatune.github.io/about/</guid>
      <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://simulatune.github.io/post/2022/10/design_pattern/</link>
      <pubDate>Fri, 07 Oct 2022 20:22:00 +0800</pubDate>
      
      <guid>https://simulatune.github.io/post/2022/10/design_pattern/</guid>
      <description>&lt;h2 id=&#34;7大设计原则&#34;&gt;7大设计原则:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;单一职责原则【SINGLE RESPONSIBILITY PRINCIPLE】：一个类负责一项职责。&lt;/li&gt;
&lt;li&gt;里氏替换原则【LISKOV SUBSTITUTION PRINCIPLE】：继承与派生的规则。&lt;/li&gt;
&lt;li&gt;依赖倒置原则【DEPENDENCE INVERSION PRINCIPLE】：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。即针对接口编程，不要针对实现编程。&lt;/li&gt;
&lt;li&gt;接口隔离原则【INTERFACE SEGREGATION PRINCIPLE】：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。&lt;/li&gt;
&lt;li&gt;迪米特法则【LOW OF DEMETER】：高内聚，低耦合。&lt;/li&gt;
&lt;li&gt;开闭原则【OPEN CLOSE PRINCIPLE】：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。&lt;/li&gt;
&lt;li&gt;组合/聚合复用原则【Composition/Aggregation Reuse Principle(CARP) 】：尽量使用组合和聚合少使用继承的关系来达到复用的原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;23种设计模式&#34;&gt;23种设计模式:&lt;/h2&gt;
&lt;h3 id=&#34;创建型模式&#34;&gt;创建型模式&lt;/h3&gt;
&lt;h4 id=&#34;单例模式&#34;&gt;单例模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保一个类只有一个实例，并提供全局访问点。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;生成器模式&#34;&gt;生成器模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用生成器模式封装一个产品的构造过程，并允许按步骤构造。将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e7%94%9f%e6%88%90%e5%99%a8%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;原型模式&#34;&gt;原型模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当创建给定类的实例过程很昂贵或很复杂时，就使用原型模式。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e5%8e%9f%e5%9e%8b%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工厂方法模式&#34;&gt;工厂方法模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e5%b7%a5%e5%8e%82%e6%96%b9%e6%b3%95%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;抽象工厂模式&#34;&gt;抽象工厂模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e6%8a%bd%e8%b1%a1%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构型模式&#34;&gt;结构型模式&lt;/h3&gt;
&lt;h4 id=&#34;代理模式&#34;&gt;代理模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为另一个对象提供一个替身或占位符以控制对这个对象的访问。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e4%bb%a3%e7%90%86%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;适配器模式&#34;&gt;适配器模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。对象适配器使用组合，类适配器使用多重继承。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e9%80%82%e9%85%8d%e5%99%a8%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;组合模式&#34;&gt;组合模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;允许你将对象组合成树形结构来表现&amp;quot;整体/部分&amp;quot;层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e7%bb%84%e5%90%88%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;装饰者模式&#34;&gt;装饰者模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e8%a3%85%e9%a5%b0%e8%80%85%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;亨元模式&#34;&gt;亨元模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如想让某个类的一个实例能用来提供许多&amp;quot;虚拟实例&amp;quot;，就使用蝇量模式。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e4%ba%a8%e5%85%83%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;外观模式&#34;&gt;外观模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e5%a4%96%e8%a7%82%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;桥接模式&#34;&gt;桥接模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e6%a1%a5%e6%8e%a5%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行为型模式&#34;&gt;行为型模式&lt;/h3&gt;
&lt;h4 id=&#34;策略模式&#34;&gt;策略模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义了算法族，分别封闭起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;状态模式&#34;&gt;状态模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;允许对象在内部状态改变时改变它的行为，对象看起来好象改了它的类。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e7%8a%b6%e6%80%81%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;责任链模式&#34;&gt;责任链模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过责任链模式，你可以为某个请求创建一个对象链。每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e8%b4%a3%e4%bb%bb%e9%93%be%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解释器模式&#34;&gt;解释器模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用解释器模式为语言创建解释器。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e8%a7%a3%e9%87%8a%e5%99%a8%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;命令模式&#34;&gt;命令模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将&amp;quot;请求&amp;quot;封闭成对象，以便使用不同的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e5%91%bd%e4%bb%a4%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;观察者模式&#34;&gt;观察者模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;备忘录模式&#34;&gt;备忘录模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当你需要让对象返回之前的状态时(例如, 你的用户请求&amp;quot;撤销&amp;quot;)，你使用备忘录模式。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e5%a4%87%e5%bf%98%e5%bd%95%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;迭代器模式&#34;&gt;迭代器模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e8%bf%ad%e4%bb%a3%e5%99%a8%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模板方法模式&#34;&gt;模板方法模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e6%a8%a1%e6%9d%bf%e6%96%b9%e6%b3%95%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;访问者模式&#34;&gt;访问者模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当你想要为一个对象的组合增加新的能力，且封装并不重要时，就使用访问者模式。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e8%ae%bf%e9%97%ae%e8%80%85%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;中介者模式&#34;&gt;中介者模式&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用中介者模式来集中相关对象之间复杂的沟通和控制方式。&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://simulatune.github.io/images/Design_Pattern/%e4%b8%ad%e4%bb%8b%e8%80%85%e6%a8%a1%e5%bc%8f.png&#34;/&gt;
    &lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
